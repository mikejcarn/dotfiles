import { CancellationToken } from 'vscode-languageserver';
import * as lsp from 'vscode-languageserver-types';
import { URI } from 'vscode-uri';
import { LsConfiguration } from '../config';
import { ISlugifier } from '../slugify';
import { ITextDocument } from '../types/textDocument';
import { Disposable } from '../util/dispose';
import { IWorkspace } from '../workspace';
import { MdLink, MdLinkSource } from './documentLinks';
import { MdReference, MdReferencesProvider } from './references';
export interface MdReferencesResponse {
    references: MdReference[];
    triggerRef: MdReference;
}
interface MdFileRenameEdit {
    readonly from: URI;
    readonly to: URI;
}
/**
 * Type with additional metadata about the edits for testing
 *
 * This is needed since `lsp.WorkspaceEdit` does not expose info on file renames.
 */
export interface MdWorkspaceEdit {
    readonly edit: lsp.WorkspaceEdit;
    readonly fileRenames?: ReadonlyArray<MdFileRenameEdit>;
}
export declare class MdRenameProvider extends Disposable {
    private readonly configuration;
    private readonly workspace;
    private readonly referencesProvider;
    private readonly slugifier;
    private cachedRefs?;
    private readonly renameNotSupportedText;
    constructor(configuration: LsConfiguration, workspace: IWorkspace, referencesProvider: MdReferencesProvider, slugifier: ISlugifier);
    prepareRename(document: ITextDocument, position: lsp.Position, token: CancellationToken): Promise<undefined | {
        range: lsp.Range;
        placeholder: string;
    }>;
    private findHeaderDeclaration;
    provideRenameEdits(document: ITextDocument, position: lsp.Position, newName: string, token: CancellationToken): Promise<lsp.WorkspaceEdit | undefined>;
    provideRenameEditsImpl(document: ITextDocument, position: lsp.Position, newName: string, token: CancellationToken): Promise<MdWorkspaceEdit | undefined>;
    private renameFilePath;
    private renameFragment;
    private renameExternalLink;
    private renameReferenceLinks;
    private getAllReferences;
}
export declare function getLinkRenameText(workspace: IWorkspace, source: MdLinkSource, newPath: URI, preferDotSlash?: boolean): string | undefined;
export declare function getFilePathRange(link: MdLink): lsp.Range;
export {};
